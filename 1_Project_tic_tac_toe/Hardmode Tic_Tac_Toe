{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["pcmP2NNBpsip","ZPqjbN_2pwje","JK6CAy9jpzdX","xNZ4YC0Kp3BY","M1bva8fZp5_l"],"authorship_tag":"ABX9TyNNMGBg5cDNdcqLix9T3PtO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Для игры в крестики-нолики понадобится простое игровое поле, представленное в виде матрицы или сетки, которая будет хранить состояние каждой клетки: либо она пуста, либо в ней находится крестик или нолик.\n"],"metadata":{"id":"K6YlHq5xlup9"}},{"cell_type":"code","execution_count":39,"metadata":{"id":"9Hj6_0Ealq8p","executionInfo":{"status":"ok","timestamp":1712497488166,"user_tz":-180,"elapsed":2,"user":{"displayName":"Кирилл Константинов","userId":"17121886193548028996"}}},"outputs":[],"source":["class GameBoard:\n","  \"\"\"\n","  Класс, представляющий игровое поле для игры в крестики-нолики.\n","\n","  Attributes:\n","  board (list): Двумерный список, представляющий игровое поле.\n","  \"\"\"\n","\n","\n","  def __init__(self):\n","    \"\"\"\n","    Инициализация игрового поля.\n","    Создает пустое игровое поле размером 3x3.\n","    \"\"\"\n","    self.board = [[' ' for _ in range(3)] for _ in range(3)]\n","\n","\n","  def print_board(self):\n","    \"\"\"\n","    Отображает текущее состояние игрового поля.\n","    \"\"\"\n","    for row in self.board:\n","        print('|'.join(row))\n","        print('-----')\n","    print()\n","\n","\n","  def make_move(self, row, col, player):\n","    \"\"\"\n","    Выполняет ход на заданную клетку.\n","\n","    Args:\n","    row (int): Номер строки на игровом поле.\n","    col (int): Номер столбца на игровом поле.\n","    player (str): Символ игрока, который делает ход ('X' или 'O').\n","\n","    Returns:\n","    bool: True, если ход выполнен успешно, False, если клетка уже занята.\n","    \"\"\"\n","    if self.board[row][col] == ' ':\n","        self.board[row][col] = player\n","        return True\n","    else:\n","        print(\"Клетка уже занята!\")\n","        return False\n","\n","\n","  def check_winner(self):\n","    \"\"\"\n","    Проверяет, есть ли победитель в текущем состоянии игрового поля.\n","\n","    Returns:\n","    str or None: Символ победителя ('X' или 'O') или None, если победителя нет.\n","    \"\"\"\n","    for row in range(3):\n","        if self.board[row][0] == self.board[row][1] == self.board[row][2] != ' ':\n","            return self.board[row][0]\n","\n","    for col in range(3):\n","        if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n","            return self.board[0][col]\n","\n","    if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n","        return self.board[0][0]\n","\n","    if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n","        return self.board[0][2]\n","    return None\n","\n","\n","  def is_board_full(self):\n","    \"\"\"\n","    Проверяет, заполнено ли игровое поле.\n","\n","    Returns:\n","    bool: True, если игровое поле полностью заполнено, False в противном случае.\n","    \"\"\"\n","    for row in self.board:\n","        for cell in row:\n","            if cell == ' ':\n","                return False\n","    return True"]},{"cell_type":"markdown","source":["Определяем класс GameBoard, который представляет игровое поле. У него есть методы для отображения поля, выполнения хода, проверки победителя и проверки заполненности поля."],"metadata":{"id":"nd5Pd3vfl1qh"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"t_DhOiUym_mv"}},{"cell_type":"markdown","source":["Чтобы сыграть тестовую игру, нужно создать экземпляр класса GameBoard и взаимодействовать с ним через его методы."],"metadata":{"id":"8kUGaILRm_75"}},{"cell_type":"code","source":["def play_game():\n","    # Создаем экземпляр класса GameBoard\n","    board = GameBoard()\n","\n","    # Основной игровой цикл\n","    while True:\n","        # Выводим текущее состояние игрового поля\n","        print(\"Текущее состояние игрового поля:\")\n","        board.print_board()\n","\n","        # Ход игрока X\n","        print(\"Ход игрока X\")\n","        row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","        col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        while not (0 <= row <= 2 and 0 <= col <= 2):\n","            print(\"Пожалуйста, введите корректные координаты!\")\n","            row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","            col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        while not board.make_move(row, col, 'X'):\n","            print(\"Клетка уже занята! Пожалуйста, введите корректные координаты!\")\n","            row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","            col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        print()\n","        # Проверяем, есть ли победитель или ничья\n","        winner = board.check_winner()\n","        if winner:\n","            board.print_board()\n","            print(f\"Игрок {winner} победил!\")\n","            break\n","        elif board.is_board_full():\n","            board.print_board()\n","            print(\"Ничья!\")\n","            break\n","\n","        # Выводим текущее состояние игрового поля\n","        print(\"Текущее состояние игрового поля:\")\n","        board.print_board()\n","\n","        # Ход компьютерного противника (O)\n","        print(\"Ход компьютерного противника O\")\n","        # В этом месте можно реализовать алгоритм для выбора хода компьютерного противника\n","        # Например, можно использовать алгоритм минимакса или случайный выбор\n","        # В данном примере пока просто попросим пользователя ввести координаты\n","        row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","        col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        while not (0 <= row <= 2 and 0 <= col <= 2):\n","            print(\"Пожалуйста, введите корректные координаты!\")\n","            row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","            col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        while not board.make_move(row, col, 'O'):\n","            print(\"Клетка уже занята! Пожалуйста, введите корректные координаты!\")\n","            row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","            col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        print()\n","        # Проверяем, есть ли победитель или ничья\n","        winner = board.check_winner()\n","        if winner:\n","            # Выводим текущее состояние игрового поля перед объявлением победителя\n","            print(\"Текущее состояние игрового поля:\")\n","            board.print_board()\n","            print(f\"Игрок {winner} победил!\")\n","            break\n","        elif board.is_board_full():\n","            board.print_board()\n","            print(\"Ничья!\")\n","            break\n","\n","# Запускаем игру\n","play_game()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VFQTFQADnEFb","executionInfo":{"status":"ok","timestamp":1712496345044,"user_tz":-180,"elapsed":18284,"user":{"displayName":"Кирилл Константинов","userId":"17121886193548028996"}},"outputId":"f399157d-24a9-42e6-8051-5e26669a4164"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Текущее состояние игрового поля:\n"," | | \n","-----\n"," | | \n","-----\n"," | | \n","-----\n","Ход игрока X\n","Введите номер строки (0, 1, 2): 0\n","Введите номер столбца (0, 1, 2): 0\n","\n","Текущее состояние игрового поля:\n","X| | \n","-----\n"," | | \n","-----\n"," | | \n","-----\n","Ход компьютерного противника O\n","Введите номер строки (0, 1, 2): 1\n","Введите номер столбца (0, 1, 2): 1\n","\n","Текущее состояние игрового поля:\n","X| | \n","-----\n"," |O| \n","-----\n"," | | \n","-----\n","Ход игрока X\n","Введите номер строки (0, 1, 2): 0\n","Введите номер столбца (0, 1, 2): 1\n","\n","Текущее состояние игрового поля:\n","X|X| \n","-----\n"," |O| \n","-----\n"," | | \n","-----\n","Ход компьютерного противника O\n","Введите номер строки (0, 1, 2): 2\n","Введите номер столбца (0, 1, 2): 0\n","\n","Текущее состояние игрового поля:\n","X|X| \n","-----\n"," |O| \n","-----\n","O| | \n","-----\n","Ход игрока X\n","Введите номер строки (0, 1, 2): 0\n","Введите номер столбца (0, 1, 2): 2\n","\n","X|X|X\n","-----\n"," |O| \n","-----\n","O| | \n","-----\n","Игрок X победил!\n"]}]},{"cell_type":"markdown","source":["Отлично, мы смогли реализовать простое игровое поле и начальную логику игры! Это отличное начало для проекта. Теперь у нас есть основа, на которой можно строить дальше.\n","\n","Какие дальнейшие шаги мы предпримем?\n","\n","1. **Улучшенный компьютерный противник**: Реализуем более умного компьютерного противника, который использует сложные алгоритмы для принятия решений, такие как алгоритм минимакса с альфа-бета отсечением.\n","\n","2. **Графический пользовательский интерфейс**: Создадим более привлекательный и интерактивный графический интерфейс с помощью библиотеки Pygame или Tkinter.\n","\n","3. **Режимы игры**: Добавим возможность выбора различных режимов игры, например, игру против компьютера или игру между двумя игроками.\n","\n","4. **Анимации и звук**: Добавим анимации и звуковые эффекты, чтобы сделать игру более привлекательной и захватывающей.\n","\n","5. **Сохранение игры и лучшие результаты**: Реализуем функционал сохранения текущего состояния игры и отслеживания лучших результатов игроков.\n","\n","6. **Многопользовательский режим**: Добавим возможность играть в крестики-нолики по сети с другими игроками.\n","\n","7. **Адаптивный интерфейс**: Сделаем игру адаптивной, чтобы она могла работать на разных устройствах и экранах.\n"],"metadata":{"id":"S1tXsFN4pJC6"}},{"cell_type":"markdown","source":["# 1 **Улучшенный компьютерный противник**:\n","\n","Реализуем более умного компьютерного противника, который использует сложные алгоритмы для принятия решений, такие как алгоритм минимакса с альфа-бета отсечением."],"metadata":{"id":"6j9zn1UZpn6Y"}},{"cell_type":"markdown","source":["Для начала создадим базовый класс для компьютерного противника. Затем мы можем реализовать различные стратегии для выбора хода компьютера, включая простые тактики и более сложные алгоритмы искусственного интеллекта, такие как алгоритм минимакса."],"metadata":{"id":"ZUPT-dZIqpAA"}},{"cell_type":"code","source":["class ComputerPlayer:\n","    def __init__(self, symbol):\n","        self.symbol = symbol\n","\n","    def make_move(self, board):\n","        # Этот метод будет реализован в подклассах для различных стратегий компьютерного противника\n","        pass\n"],"metadata":{"id":"eJJVIzqUqkWd","executionInfo":{"status":"ok","timestamp":1712496352968,"user_tz":-180,"elapsed":1,"user":{"displayName":"Кирилл Константинов","userId":"17121886193548028996"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":["Теперь мы можем создать подклассы ComputerPlayer для различных стратегий хода компьютерного противника. Начнем с реализации простой стратегии случайного выбора хода."],"metadata":{"id":"fDT5aRQsq5JP"}},{"cell_type":"code","source":["import random\n","\n","class RandomComputerPlayer(ComputerPlayer):\n","  \"\"\"\n","  будет выбирать случайный доступный ход на игровом поле.\n","  Теперь мы можем использовать этот класс в нашей игре крестики-нолики,\n","  чтобы сделать компьютерного противника более интересным.\n","  \"\"\"\n","  def make_move(self, board):\n","    # Получаем список доступных ходов\n","    available_moves = [(row, col) for row in range(3) for col in range(3) if board[row][col] == ' ']\n","    # Выбираем случайный ход из списка доступных\n","    return random.choice(available_moves)\n"],"metadata":{"id":"kj0ehp66qrjI","executionInfo":{"status":"ok","timestamp":1712496355361,"user_tz":-180,"elapsed":294,"user":{"displayName":"Кирилл Константинов","userId":"17121886193548028996"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["Для того чтобы протестировать эту стратегию, мы можем использовать ее в нашем коде игры.\n","\n","Изменяем функцию `play_game()` - добавим в нее вот такой код, на на место игрока 'O'"],"metadata":{"id":"tZ4ns30drK6j"}},{"cell_type":"code","source":["# Не выполнять, просто пример...\n","\n","\n","# Создаем экземпляр класса RandomComputerPlayer\n","computer_player = RandomComputerPlayer('O')\n","\n","# Ход компьютерного противника (O)\n","print(\"Ход компьютерного противника O\")\n","row, col = computer_player.make_move(board.board)\n","board.make_move(row, col, 'O')"],"metadata":{"id":"m8wqmGWprl3p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def play_game():\n","    # Создаем экземпляр класса GameBoard\n","    board = GameBoard()\n","\n","    # Основной игровой цикл\n","    while True:\n","        # Выводим текущее состояние игрового поля\n","        print(\"Текущее состояние игрового поля:\")\n","        board.print_board()\n","\n","        # Ход игрока X\n","        print(\"Ход игрока X\")\n","        row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","        col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        while not (0 <= row <= 2 and 0 <= col <= 2):\n","            print(\"Пожалуйста, введите корректные координаты!\")\n","            row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","            col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        while not board.make_move(row, col, 'X'):\n","            print(\"Клетка уже занята! Пожалуйста, введите корректные координаты!\")\n","            row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","            col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        print()\n","        # Проверяем, есть ли победитель или ничья\n","        winner = board.check_winner()\n","        if winner:\n","            board.print_board()\n","            print(f\"Игрок {winner} победил!\")\n","            break\n","        elif board.is_board_full():\n","            board.print_board()\n","            print(\"Ничья!\")\n","            break\n","\n","        # Выводим текущее состояние игрового поля\n","        print(\"Текущее состояние игрового поля:\")\n","        board.print_board()\n","\n","        # Создаем экземпляр класса RandomComputerPlayer\n","        computer_player = RandomComputerPlayer('O')\n","\n","        # Ход компьютерного противника (O)\n","        print(\"Ход компьютерного противника O\")\n","        row, col = computer_player.make_move(board.board)\n","        board.make_move(row, col, 'O')\n","        print()\n","        # Проверяем, есть ли победитель или ничья\n","        winner = board.check_winner()\n","        if winner:\n","            # Выводим текущее состояние игрового поля перед объявлением победителя\n","            print(\"Текущее состояние игрового поля:\")\n","            board.print_board()\n","            print(f\"Игрок {winner} победил!\")\n","            break\n","        elif board.is_board_full():\n","            board.print_board()\n","            print(\"Ничья!\")\n","            break\n","\n","# Запускаем игру\n","play_game()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":876},"id":"x-spIMgNrdMD","executionInfo":{"status":"error","timestamp":1712498099684,"user_tz":-180,"elapsed":6043,"user":{"displayName":"Кирилл Константинов","userId":"17121886193548028996"}},"outputId":"e6cd98be-a415-4789-9c25-3af2409b93fa"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Текущее состояние игрового поля:\n"," | | \n","-----\n"," | | \n","-----\n"," | | \n","-----\n","\n","Ход игрока X\n","Введите номер строки (0, 1, 2): 1\n","Введите номер столбца (0, 1, 2): 2\n","\n","Текущее состояние игрового поля:\n"," | | \n","-----\n"," | |X\n","-----\n"," | | \n","-----\n","\n","Ход компьютерного противника O\n","\n","Текущее состояние игрового поля:\n"," | | \n","-----\n","O| |X\n","-----\n"," | | \n","-----\n","\n","Ход игрока X\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-f04d9f1a0bf4>\u001b[0m in \u001b[0;36m<cell line: 61>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;31m# Запускаем игру\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m \u001b[0mplay_game\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-47-f04d9f1a0bf4>\u001b[0m in \u001b[0;36mplay_game\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0;31m# Ход игрока X\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Ход игрока X\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0mrow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите номер строки (0, 1, 2): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0mcol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите номер столбца (0, 1, 2): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":["Теперь компьютерный противник будет выбирать случайные ходы на пустых клетках игрового поля. После того, как мы протестируем эту стратегию и убедимся, что она работает должным образом, мы можем перейти к сложным алгоритмам искусственного интеллекта."],"metadata":{"id":"PiZp3EgrrP_B"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"fiA8S3STssUH"}},{"cell_type":"markdown","source":["## MinimaxComputerPlayer"],"metadata":{"id":"IF3FfWCDyHhr"}},{"cell_type":"markdown","source":["**МинМакс алгоритм** - позволяет компьютеру выбирать оптимальный ход, предполагая, что оппонент также играет оптимально.\n","\n","Он основывается на рекурсивном просмотре всех возможных ходов и оценке их последствий с использованием оценочной функции."],"metadata":{"id":"nf45sXxBslWa"}},{"cell_type":"markdown","source":["Для начала создадим подкласс **MinimaxComputerPlayer**, который будет реализовывать этот алгоритм:"],"metadata":{"id":"sjmMTUKLsuHR"}},{"cell_type":"code","source":["class MinimaxComputerPlayer(ComputerPlayer):\n","\n","    def make_move(self, board):\n","        best_score = float('-inf')\n","        best_move = None\n","        available_moves = [(row, col) for row in range(3) for col in range(3) if board.board[row][col] == ' ']\n","        for (row, col) in available_moves:\n","          if board.board[row][col] == ' ':\n","              board.make_move(row, col, self.symbol)\n","              score = self.minimax(board, False)\n","              board.make_move(row, col, ' ')  # Отменяем ход\n","              if score > best_score:\n","                  best_score = score\n","                  best_move = (row, col)\n","\n","        return best_move\n","\n","    def minimax(self, board, is_maximizing):\n","        if board.check_winner() == 'X':\n","            return -1\n","        elif board.check_winner() == 'O':\n","            return 1\n","        elif board.is_board_full():\n","            return 0\n","\n","        if is_maximizing:\n","            best_score = float('-inf')\n","            for row in range(3):\n","                for col in range(3):\n","                    if board.board[row][col] == ' ':\n","                        board.make_move(row, col, 'O')\n","                        score = self.minimax(board, False)\n","                        board.make_move(row, col, ' ')  # Отменяем ход\n","                        best_score = max(score, best_score)\n","            return best_score\n","        else:\n","            best_score = float('inf')\n","            for row in range(3):\n","                for col in range(3):\n","                    if board.board[row][col] == ' ':\n","                        board.make_move(row, col, 'X')\n","                        score = self.minimax(board, True)\n","                        board.make_move(row, col, ' ')  # Отменяем ход\n","                        best_score = min(score, best_score)\n","            return best_score\n"],"metadata":{"id":"5P78jnmf0K8x","executionInfo":{"status":"ok","timestamp":1712498556656,"user_tz":-180,"elapsed":229,"user":{"displayName":"Кирилл Константинов","userId":"17121886193548028996"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["def play_game():\n","    # Создаем экземпляр класса GameBoard\n","    board = GameBoard()\n","\n","    # Основной игровой цикл\n","    while True:\n","        # Выводим текущее состояние игрового поля\n","        print(\"Текущее состояние игрового поля:\")\n","        board.print_board()\n","\n","        # Ход игрока X\n","        print(\"Ход игрока X\")\n","        row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","        col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        while not (0 <= row <= 2 and 0 <= col <= 2):\n","            print(\"Пожалуйста, введите корректные координаты!\")\n","            row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","            col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        while not board.make_move(row, col, 'X'):\n","            print(\"Клетка уже занята! Пожалуйста, введите корректные координаты!\")\n","            row = int(input(\"Введите номер строки (0, 1, 2): \"))\n","            col = int(input(\"Введите номер столбца (0, 1, 2): \"))\n","        print()\n","        # Проверяем, есть ли победитель или ничья\n","        winner = board.check_winner()\n","        if winner:\n","            board.print_board()\n","            print(f\"Игрок {winner} победил!\")\n","            break\n","        elif board.is_board_full():\n","            board.print_board()\n","            print(\"Ничья!\")\n","            break\n","\n","        # Выводим текущее состояние игрового поля\n","        print(\"Текущее состояние игрового поля:\")\n","        board.print_board()\n","\n","        # Создаем экземпляр класса MinimaxComputerPlayer\n","        computer_player = MinimaxComputerPlayer('O')\n","\n","        print(\"Ход компьютерного противника O\")\n","        row, col = computer_player.make_move(board)\n","        board.make_move(row, col, 'O')\n","        print()\n","\n","        # Проверяем, есть ли победитель или ничья\n","        winner = board.check_winner()\n","\n","        if winner:\n","            # Выводим текущее состояние игрового поля перед объявлением победителя\n","            print(\"Текущее состояние игрового поля:\")\n","            board.print_board()\n","            print(f\"Игрок {winner} победил!\")\n","            break\n","        elif board.is_board_full():\n","            board.print_board()\n","            print(\"Ничья!\")\n","            break\n","\n","play_game()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8vqyADDy0e3W","executionInfo":{"status":"ok","timestamp":1712498664091,"user_tz":-180,"elapsed":3590,"user":{"displayName":"Кирилл Константинов","userId":"17121886193548028996"}},"outputId":"eeebf1f3-778e-4901-d611-7871bda1c4c0"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["Текущее состояние игрового поля:\n"," | | \n","-----\n"," | | \n","-----\n"," | | \n","-----\n","\n","Ход игрока X\n","Введите номер строки (0, 1, 2): 0\n","Введите номер столбца (0, 1, 2): 0\n","\n","Текущее состояние игрового поля:\n","X| | \n","-----\n"," | | \n","-----\n"," | | \n","-----\n","\n","Ход компьютерного противника O\n","Клетка уже занята!\n","Клетка уже занята!\n","Клетка уже занята!\n","Клетка уже занята!\n","Клетка уже занята!\n","Клетка уже занята!\n","Клетка уже занята!\n","Клетка уже занята!\n","Клетка уже занята!\n","\n","Текущее состояние игрового поля:\n","X|O|X\n","-----\n","O|X|O\n","-----\n","X|X|X\n","-----\n","\n","Игрок X победил!\n"]}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"rmmwc8_FqlVY"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"suYNBphOqlvF"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"1DXPXNpmqmOX"}},{"cell_type":"markdown","source":["# 2 **Графический пользовательский интерфейс**: Создадим более привлекательный и интерактивный графический интерфейс с помощью библиотеки Pygame или Tkinter."],"metadata":{"id":"pcmP2NNBpsip"}},{"cell_type":"markdown","source":[],"metadata":{"id":"xg3lK7NnpuR2"}},{"cell_type":"markdown","source":["# **3 Режимы игры**:\n","\n","Добавим возможность выбора различных режимов игры, например, игру против компьютера или игру между двумя игроками."],"metadata":{"id":"ZPqjbN_2pwje"}},{"cell_type":"markdown","source":[],"metadata":{"id":"qRG6nDbLpxxT"}},{"cell_type":"markdown","source":["# **4 Анимации и звук**:\n","\n","Добавим анимации и звуковые эффекты, чтобы сделать игру более привлекательной и захватывающей."],"metadata":{"id":"JK6CAy9jpzdX"}},{"cell_type":"markdown","source":[],"metadata":{"id":"HO9rltdlp0zV"}},{"cell_type":"markdown","source":["# **5 Сохранение игры и лучшие результаты**:\n","\n","Реализуем функционал сохранения текущего состояния игры и отслеживания лучших результатов игроков."],"metadata":{"id":"xNZ4YC0Kp3BY"}},{"cell_type":"markdown","source":[],"metadata":{"id":"3WjyBWp0p51J"}},{"cell_type":"markdown","source":["# **6 Многопользовательский режим**:\n","\n","Добавим возможность играть в крестики-нолики по сети с другими игроками."],"metadata":{"id":"M1bva8fZp5_l"}},{"cell_type":"markdown","source":[],"metadata":{"id":"9uWg2GNqqDtj"}}]}